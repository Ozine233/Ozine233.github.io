<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HybridImage的c++实现</title>
    <url>/2021/03/28/HybridImage/</url>
    <content><![CDATA[<p>A <strong>hybrid image</strong> is an image that is <a href="https://en.wikipedia.org/wiki/Visual_perception">perceived</a> in one of two different ways, depending on viewing distance, based on the way humans process visual input. Hybrid images combine the low <a href="https://en.wikipedia.org/wiki/Spatial_frequencies">spatial frequencies</a> of one picture with the high spatial frequencies of another picture, producing an image with an interpretation that changes with viewing distance.</p>
<span id="more"></span>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
  </entry>
  <entry>
    <title>Cmake下跨平台支持方式</title>
    <url>/2022/03/10/Cmake%E4%B8%8B%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%94%AF%E6%8C%81%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>Cmake一大优势是对跨平台的广泛支持，但是在实现应用过程中，一些API在不同的平台有不同的接口，以及需要调用不一样的系统函数，此时可以用Cmake添加当前系统的宏定义，来判断编译时使用哪一部分代码！</p>
<span id="more"></span>

<p> 首先配置一个头文件为 SysConfig.h.in</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SYS_CONFIG_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_CONFIG_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-- 获得 项目版本号，设置为 宏，以便 源码 中使用。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION_MAJOR @VERSION_MAJOR@</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VERSION_MINOR @VERSION_MINOR@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-- SWITCH_1 是个 option，需要 cmake 动态生成</span></span><br><span class="line"><span class="comment">// 示范如何创建一个 cmake 自定义变量</span></span><br><span class="line"><span class="comment">// 最终可以传递到 编译后的 程序体内</span></span><br><span class="line"><span class="meta">#cmakedefine SWITCH_1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-- 标明自己所处 OS</span></span><br><span class="line"><span class="meta">#cmakedefine  OS_UNIX_</span></span><br><span class="line"><span class="meta">#cmakedefine  OS_MACOSX_</span></span><br><span class="line"><span class="meta">#cmakedefine  OS_LINUX_</span></span><br><span class="line"><span class="meta">#cmakedefine  OS_WIN32_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-- CMAKE_SYSTEM_NAME 表示 当前系统名，比如 Linux，Darwin</span></span><br><span class="line"><span class="comment">//-- 使用 @...@ 提取后，再用 &quot;...&quot; 将其设置为 字符串宏</span></span><br><span class="line"><span class="comment">//-- 以便 源码 中使用。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_NAME <span class="meta-string">&quot;@CMAKE_SYSTEM_NAME@&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>在外部 cmakelist.txt 中添加</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#---------------------------------------------------#</span></span><br><span class="line"><span class="comment">#                    OS</span></span><br><span class="line"><span class="comment">#---------------------------------------------------#</span></span><br><span class="line"><span class="keyword">if</span>( APPLE )</span><br><span class="line">    <span class="keyword">option</span>( OS_MACOSX_ <span class="string">&quot; MACOSX &quot;</span> <span class="keyword">ON</span> )</span><br><span class="line">    <span class="keyword">option</span>( OS_UNIX_ <span class="string">&quot; UNIX &quot;</span> <span class="keyword">ON</span> )</span><br><span class="line">    <span class="keyword">message</span>( STATUS <span class="string">&quot;___APPLE___&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">elseif</span>( UNIX <span class="keyword">AND</span> <span class="keyword">NOT</span> APPLE )</span><br><span class="line">    <span class="keyword">option</span>( OS_LINUX_ <span class="string">&quot; LINUX &quot;</span> <span class="keyword">ON</span> )</span><br><span class="line">    <span class="keyword">option</span>( OS_UNIX_ <span class="string">&quot; UNIX &quot;</span> <span class="keyword">ON</span> )</span><br><span class="line">    <span class="keyword">message</span>( STATUS <span class="string">&quot;___UNIX___&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 当使用 Virsual Studio 编译 cmake项目时，可用 WIN32</span></span><br><span class="line"><span class="comment">#   如果出错，尝试改用 MSVC</span></span><br><span class="line"><span class="keyword">elseif</span>( WIN32 )</span><br><span class="line">    <span class="keyword">option</span>( OS_WIN32_ <span class="string">&quot; WIN32 &quot;</span> <span class="keyword">ON</span> )</span><br><span class="line">    <span class="keyword">message</span>( STATUS <span class="string">&quot;___WIN32___&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">endif</span>( APPLE )</span><br><span class="line"><span class="comment">#---- Must before project!!! ----</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------#</span></span><br><span class="line"><span class="comment">#                 SySconfig</span></span><br><span class="line"><span class="comment">#---------------------------------------------------#</span></span><br><span class="line"><span class="comment">#-- 配置 一个 h文件，用来 从 cmake 传递一些 变量 到 源文件 中。</span></span><br><span class="line"><span class="comment">#-- 我们需要手动编写 .h.in 文件。</span></span><br><span class="line"><span class="comment">#-- 然后，cmake调用会 帮我们自动生成对应的 h文件。</span></span><br><span class="line"><span class="comment">#-- 最后，正式 make编译时。源文件 就能 include 这些生成的 h文件。</span></span><br><span class="line"><span class="keyword">option</span>( SWITCH_1</span><br><span class="line">    <span class="string">&quot; option test: switch 1 &quot;</span> <span class="keyword">ON</span> )</span><br><span class="line"><span class="keyword">configure_file</span>(</span><br><span class="line">    <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;SysConfig.h.in&quot;</span></span><br><span class="line">    <span class="string">&quot;$&#123;EXECUTABLE_OUTPUT_PATH&#125;SysConfig.h&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>live</title>
    <url>/2022/03/30/live/</url>
    <content><![CDATA[<p>“Dont stand still, move forward.” Really needed that, thank you Mike.</p>
<span id="more"></span>

]]></content>
  </entry>
</search>
